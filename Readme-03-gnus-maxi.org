#+TITLE: Gnus Konfiguration (maxi)
#+OPTIONS: toc:nil

* Inhalt							   :TOC_4_gh:
 - [[#vorschau-der-nachricht-die-man-gerade-schreibt][Vorschau der Nachricht die man gerade schreibt]]
 - [[#unicode-zeichen-einfügen][Unicode Zeichen einfügen]]
 - [[#zufalls-signaturen][Zufalls Signaturen]]
 - [[#summary-buffer-maximieren][Summary Buffer maximieren]]

* Vorschau der Nachricht die man gerade schreibt

Gnus bietet mit =mml-preview= eine Vorschaufunktion beim Verfassen
von Nachrichten an. Hier mal eine Funktion die das für mich etwas
bequemer macht. Das Ganze habe ich dann auf =F5= gelegt. Mit Prefix,
also vorher =C-u= drücken, sieht man das Rohformat. Die Voransicht
wird mit =q= verlassen.

#+BEGIN_SRC emacs-lisp
  (defun my-mml-preview (&optional raw)
    "Preview wrapper, when *Group* doesn't exists."
    (interactive "P")
    (if (get-buffer "*Group*")
        (progn
          (mml-preview raw)
          (delete-other-windows))
      (create-file-buffer "*Group*")
      (mml-preview raw)
      (delete-other-windows)
      (kill-buffer "*Group*")))

  (define-key message-mode-map [f5]
    'my-mml-preview)
#+END_SRC

Hier die Voransicht einer Nachricht im Rohformat. Ganz praktisch wenn
man ein paar Einstellungen verändert hat und mal sehen möchte wie die
Nachricht abgeschickt würde.

[[file:images/gnus-art-raw-preview.jpg]]

* Unicode Zeichen einfügen

Um mal eben ein Unicode Smiley oder ähnliches einzufügen gibt es für
Emacs ein Paket. Um Pakete zu installieren ist folgender Code in der
=~/.emacs= einzutragen.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))

  (package-initialize)
#+END_SRC

Das Paket =counsel= wird mit ~M-x package-install RET counsel RET~
installiert.

Danach kann man dann mit ~M-x counsel-unicode-char RET~ ein Unicode
Zeichen wählen. Einfach smil, fist, hand, cat, thumb usw. tippen.

Mit  ~(global-set-key (kbd "<f12> u") 'counsel-unicode-char)~ legt man
die Funktion global auf 'F12 u'.

[[file:images/emacs-select-unicode.jpg]]

* Zufalls Signaturen

Möglichkeite eins, alle Signaturen in eine Datei speichern und die
Signaturen mit zwei Leerzeilen trennen.

#+BEGIN_SRC emacs-lisp
  (defun my-sig-from-file (sigfile)
    "Read random signatur from SIGFILE. Signatures must be
  separated by two empty lines."
    (let* ((sigdata (with-temp-buffer
                      (insert-file-contents sigfile)
                      (split-string (buffer-string) "^\n\n" t)))
           (sigcount (length sigdata)))
      (nth (random sigcount) sigdata)))
#+END_SRC

Angemommen die Signaturen befinden sich in der Datei =~/sigdata=, dann
sieht der Aufruf in gnus-posting-styles so aus.

#+BEGIN_SRC emacs-lisp
  (signature (my-sig-from-file "~/sigdata"))
#+END_SRC

Möglichkeite zwei, die Signuaturen sind in einzelne Dateien mit der
Endung =sigf= gespeichert und liegen im Verzeichnis =~/sigdir=.

#+BEGIN_SRC emacs-lisp
  (defun my-sig-from-dir (sigdir pattern)
    "Return random file from SIGDIR with PATTERN."
    (let ((flist (file-expand-wildcards (concat sigdir pattern) nil)))
      (nth (random (length flist)) flist)))
#+END_SRC

Der Eintrag für gnus-posting-styles lautet dann.

#+BEGIN_SRC emacs-lisp
  (signature-file (my-sig-from-dir "~/sigdir/" "*.sigf"))
#+END_SRC

* Summary Buffer maximieren

Zusätzlich wird die aktuelle Position zentriert.

#+BEGIN_SRC emacs-lisp
  (defun my-del-other-w-recenter ()
    "Delete other window and recenter the current window."
    (interactive)
    (delete-other-windows)
    (recenter))
#+END_SRC

Die Funktion habe ich hiermit auf die 'Einfügen' Taste gelegt.

#+BEGIN_SRC emacs-lisp
  (define-key gnus-summary-mode-map [(insert)]
    'my-del-other-w-recenter)
#+END_SRC
