#+TITLE: Gnus Konfiguration (midi)
#+OPTIONS: toc:nil

Voraussetzung ist, dass Gnus soweit funktioniert und die Eintragungen
wie in [[file:Readme-01-gnus-mini.org][gnus-mini]] gemacht wurden. Wenn nicht anders angegeben, werden
alle Einstellung in der =~/.gnus.el= gemacht.

* Erweiterte (midi) Konfiguration für Gnus				:TOC_4_gh:
 - [[#passwort-für-cancel-und-supersede][Passwort für cancel und supersede]]
 - [[#zweiten-newsserver-eintragen][Zweiten Newsserver eintragen]]
 - [[#gnus-und-mail][Gnus und Mail]]
   - [[#mail-versenden][Mail versenden]]
   - [[#gmail-imap][Gmail Imap]]
   - [[#mail-abholen-über-pop3-und-spool][Mail abholen über pop3 und spool]]
 - [[#archiv-gruppen-festlegen][Archiv Gruppen festlegen]]
 - [[#references-und-message-ids-finden][References und Message-ID's finden]]
 - [[#warnung-ausgeben-bei-mail-antwort-in-news][Warnung ausgeben bei Mail Antwort in News]]
 - [[#aktuelle-zeile-hervorheben][Aktuelle Zeile hervorheben]]
 - [[#threading-aufhübschen][Threading aufhübschen]]
 - [[#summary-line-format][Summary Line Format]]
 - [[#posting-styles][Posting Styles]]
   - [[#x-face-header-über-posting-styles-einstellen][X-face Header über Posting Styles einstellen]]
   - [[#noch-mehr-posting-styles][Noch mehr Posting Styles]]
 - [[#scoring][Scoring]]

* Passwort für cancel und supersede

Man kann das ~canlock-password~ auch in der ~/.gnus.el setzen. Beim
ersten Posting wird das Passwort in die ~/.emacs geschrieben, zu
finden unter custom-set-variables. Mann kann es also da raus fischen
und hier eintragen. Den Eintrag in der ~/.emacs kann man dann löschen.

Das ist ganz praktisch wenn man von mehren Rechnern aus schreibt. So
hat man überall das gleiche Passwort und kann egal auf welcher
Maschine man gerade ist Artikel canceln bzw. superseden.

#+BEGIN_SRC emacs-lisp
  (setq canlock-password "GEHEIM"
        canlock-password-for-verify canlock-password)
#+END_SRC

Canceln und superseden über canlock-verify und damit unabhängig von
der Mail Adresse die man gerade benutzt.

#+BEGIN_SRC emacs-lisp
  (setq message-shoot-gnksa-feet 'canlock-verify)
#+END_SRC


* Zweiten Newsserver eintragen

Bisher wurde nur ein Newsserver angegeben, um von einem weiteren
Server zu lesen:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods '(nntp "news.gmane.org"))
#+END_SRC

Falls Zugriff mit Anmeldung die entsprechenden Angaben in der
~/.authinfo machen. Die Gruppen kann man wie zuvor über den Server
Buffer abonnieren, also im Group Buffer =^= drücken.

* Gnus und Mail

** Mail versenden

Will man auf einen News Beitrag per Mail antworten. Hier ein Beispiel
für Arcor.

#+BEGIN_SRC emacs-lisp
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq smtpmail-default-smtp-server "mail.arcor.de")
#+END_SRC

In der ~/.authinfo noch die Zugangsdaten eintragen.


~machine mail.arcor.de port 25 login USER password PASSWORD~


Das Beispiel geht allerdings davon aus, dass für =user-mail-address=
die Arcor Mailadresse eingetragen ist.

** Gmail Imap

Um Mails abzuholen ist dieser Eintrag in der ~/.gnus.el nötig:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "gmail"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port "993")
                        (nnimap-stream ssl)))
#+END_SRC

Und dieser in der ~/.authinfo:

~machine imap.gmail.com login USER password PASSWORD port imap~

Für weitere Einstellungen verweise ich auf [[http://www.emacswiki.org/emacs/GnusGmail][EmacsWiki]].

** Mail abholen über pop3 und spool

Bei diesem Beispiel wird Mail abgefragt über den lokalen Spool,
pop3server1 und pop3server2. Wenn Spool nicht benötigt wird, die Zeile
mit =(file)= löschen. Die Angaben in dem Beispiel müssen natürlich
noch angepasst werden. Die Angabe =:leave 14= belässt die Mails 14
Tage auf dem Server bevor sie gelöscht werden. Den Wert kann man auch
höher setzen oder die Zeile löschen bzw. auf =nil= setzen, um die
Mails auf dem Server sofort zu entfernen.

#+BEGIN_SRC emacs-lisp
  (setq mail-sources
        '(
          (file)
          (pop :server "pop3server1"
               :user "USER"
               :password "PASSWORD"
               :leave 14
               )
          (pop :server "pop3server2"
               :user "USER"
               :password "PASSWORD"
               :leave 14
               )
#+END_SRC

Falls noch nicht gemacht, diese beiden Zeilen eintragen.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'gnus-secondary-select-methods '(nnml ""))
  (setq nnmail-use-long-file-names t)
#+END_SRC

Damit Gnus die Mail auch sofort holt, dies hier eintragen:

#+BEGIN_SRC emacs-lisp
  (setq nnml-get-new-mail t)
#+END_SRC

* Archiv Gruppen festlegen

Eigene Beiträge werden in sogenannten Archiv Gruppen gespeichert. In
diesem Beispiel wird das =nnml= Backend gewählt, d.h. für jeden Beitrag
wird eine Datei angelegt.

#+BEGIN_SRC emacs-lisp
  (setq gnus-message-archive-group
        '((if (message-news-p)
              (concat "nnml:news-send-"
                      (format-time-string "%Y" (current-time)))
            (concat "nnml:mail-send-"
                    (format-time-string "%Y" (current-time))))))
#+END_SRC

Man erhält hiermit zwei Ordner mit "mail-send-JAHR" und
"news-send-JAHR" Will man noch in Monate unterteilen, für
~format-time-string~ =%Y-%m= wählen. Für die Ordner kann man natürlich
jeden anderen Namen wählen.

* References und Message-ID's finden

Beispiel um für die Suche nach References und Message-ID's weitere
Newsserver einzubeziehen.

#+BEGIN_SRC emacs-lisp
  (setq gnus-refer-article-method
        '(current
          (nntp "my-newsserver")
          (nntp "news.gmane.org")
          ))
#+END_SRC

* Warnung ausgeben bei Mail Antwort in News

#+BEGIN_SRC emacs-lisp
  (setq gnus-confirm-mail-reply-to-news t)
#+END_SRC

* Aktuelle Zeile hervorheben

Den ~hl-line-mode~ für Server, Group und Summary Buffer aktivieren.

#+BEGIN_SRC emacs-lisp
  (add-hook 'gnus-server-mode-hook 'hl-line-mode)
  (add-hook 'gnus-group-mode-hook 'hl-line-mode)
  (add-hook 'gnus-summary-mode-hook 'hl-line-mode)
#+END_SRC

* Threading aufhübschen

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (setq
     gnus-sum-thread-tree-indent          "  "
     gnus-sum-thread-tree-root            "●"
     gnus-sum-thread-tree-false-root      "◯"
     gnus-sum-thread-tree-single-indent   "◎"
     gnus-sum-thread-tree-leaf-with-other "├─► "
     gnus-sum-thread-tree-vertical        "│ "
     gnus-sum-thread-tree-single-leaf     "╰─► "))
#+END_SRC

Die Einrückung im Thread ist default vier, hiermit setzt man das auf
zwei.

#+BEGIN_SRC emacs-lisp
  (setq gnus-thread-indent-level 2)
#+END_SRC

Das folgende ist Geschmachssache, Ich mag es nicht wenn Beiträge ohne
Root im Thread einsortiert werden.

#+BEGIN_SRC emacs-lisp
  (setq gnus-summary-make-false-root nil)
#+END_SRC

Falls doch alles einsortiert werden soll, schaltet man hiermit die
wiederholte Anzeige des Subjects aus.

#+BEGIN_SRC emacs-lisp
  (setq gnus-summary-same-subject "")
#+END_SRC

* Summary Line Format

Hiermit steuert man welche Informatinen die Zeilen im *Summary Buffer* anzeigen.

[[file:images/gnus-sum-small.jpg]]

Hier mal ein Beispiel wie man ~gnus-summary-line-format~ über Gnus
Parameter setzt. Das =.*= match auf alle Gruppen.

#+BEGIN_SRC emacs-lisp
  (setq gnus-parameters
        '((".*"
           (gnus-summary-line-format
            "%d %R%U%z%* %B %[%-20,20n%] %s\n"))))
#+END_SRC

Mit gnus-parameters ist man flexibler als die Variable direkt zu
setzen. So kann ich für den Ordner wo sich die gesendeten Beiträge
befinden, Threading und Scoring ausschalten und andere Werte für
~gnus-summary-line-format~ setzen.

#+BEGIN_SRC emacs-lisp
  (setq gnus-parameters
        '((".*"
           (gnus-summary-line-format
            "%d %R%U%z%* %B %[%-20,20n%] %s\n"))
          ("news-send"
           (gnus-summary-line-format
            "%o %R%U%z%* %B %[%-20,20n%] %s\n")
           (gnus-use-scoring nil)
           (gnus-show-threads nil))))
#+END_SRC

Mehr Infos im Manual oder Online unter [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Group-Parameters.html#Group-Parameters][Group Parameters]].

* Posting Styles

Posting Styles erlauben es individuelle Einstellungen je Gruppe zu
machen, egal ob Mail oder News. Hier mal eine fast leere Vorlage, die
zeigen soll wie Posting Styles angewendet werden. Als Beispiel dient
der Organization Header. Alle Möglichkeiten sind im Manual zu finden:
=C-h i m Gnus RET m Posting Styles RET= oder online unter [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Posting-Styles.html][Posting
Styles]].

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles
        '(
          (".*"
           ;; Einstellung für alle Gruppen
           (Organization "Alle")
           )
          ((message-news-p)
           ;; Einstellung für alle Newsgruppen
           (Organization "News")
           )
          ((message-mail-p)
           ;; Einstellung für alle Mailgruppen
           (Organization "Mail")
           )
          ("\\btest\\b"
           ;; Einstellung für Test Gruppen
           (Organization "Test")
           )
          ))
#+END_SRC

** X-face Header über Posting Styles einstellen

Vorab, Ein xface kann man sich auch online erstellen lassen: [[http://www.dairiki.org/xface/][Online
X-Face Converter]]. Den Inhalt der Ausgabe *ohne* das "X-Face: " (auch
das Leerzeichen nicht) in eine Datei kopieren, für das Beispiel wäre
das =~/xfacefile=.

Hier ein Beispiel wie man das x-face aus einer Datei einbindet, wenn
man in Newsgroups eine Nachricht schreibt.

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles
        '(
          ((message-news-p)
           (x-face-file "~/xfacefile")
           )
          ))
#+END_SRC

** Noch mehr Posting Styles

Hier noch ein Beispiel. Entsprechende Zeilen anpassen
bzw. löschen. Hier soll auch mal gezeigt werden wie man automatisch
das Wörterbuch wechselt, einen Reply Header setzt und so weiter.

#+BEGIN_SRC emacs-lisp
  (setq gnus-posting-styles
        '(
          (".*"
           (Organization "Alle")
           (X-Url "https://www.gnu.org/software/emacs/manual/gnus.html")
           (eval (ispell-change-dictionary "deutsch"))
           )
          ((message-news-p)
           (Organization "News")
           (x-face-file "~/xfacefile")
           (signature "https://www.gnu.org/software/emacs/emacs.html")
           (Reply-To "VORNAME NACHNAME <MY-REPLAY-ADRESS@INVALID.COM>")
           )
          ((message-mail-p)
           (Organization "Mail")
           (signature-file "~/mail-signature")
           (X-Face nil)
           )
          ("^gmane"
           (eval (ispell-change-dictionary "english")))
          ("\\btest\\b"
           (Organization "Test")
           (Keywords "ignore, no reply")
           (body "\nDies ist der Test aller Tests.")
           )
          ))
#+END_SRC

* Scoring

Hier ein Beispiel, wie man die eigenen Artikel und die direkten
Antworten darauf höher scored. Im Verzeichnis =~/News= die Datei
=all.SCORE= anlegen. Hier im Beispiel benutze ich den Domainpart
meiner Message ID.

#+BEGIN_SRC emacs-lisp
  (("message-id"
    ("fhaun.de" 1 nil s))
   ("references"
    ("fhaun.de>$" 1 nil r)))
#+END_SRC

Mehr Infos im Manual oder Online unter [[http://www.gnu.org/software/emacs/manual/html_node/gnus/Scoring.html#Scoring][Scoring]].
